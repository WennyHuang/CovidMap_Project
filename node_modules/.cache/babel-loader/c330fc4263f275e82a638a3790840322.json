{"ast":null,"code":"var _jsxFileName = \"/Users/jingwen/Documents/full_stack/lab2/covid_map/src/components/map/Map.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport CountyCard from '../card/CountyCard';\nimport { MapService } from '../../service/mapService';\nimport { MapUtils } from '../../utils/mapUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AnyReactComponent = _ref => {\n  let {\n    children\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 45\n  }, this);\n};\n\n_c = AnyReactComponent;\n\nclass Map extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      boundary: {},\n      zoomLevel: 12,\n      points: {} //fetched covid data\n\n    };\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // Important! Always set the container height explicitly\n      // {} to call javascript\n      _jsxDEV(\"div\", {\n        style: {\n          height: '100vh',\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n          bootstrapURLKeys: {\n            key: 'AIzaSyCkRg8a0XvAbNSFM3xJILFbeVCx9q9dEBE'\n          },\n          defaultCenter: this.props.center,\n          defaultZoom: this.props.zoom,\n          yesIWantToUseGoogleMapApiInternals: true,\n          onGoogleApiLoaded: _ref2 => {\n            let {\n              map,\n              maps\n            } = _ref2;\n            // 1.call api to get data\n            MapService.getUSCovidData().then(response => {\n              // 2.data handling\n              // repsonse.data -> covid data\n              console.log('raw data', response.data);\n              const covidDataPoints = MapUtils.getCovidPoints(response.data); //console.log('handled data',covidDataPoints);\n\n              this.setState({\n                points: covidDataPoints\n              });\n            }).catch(error => console.log(error)); // 3.set state to trigger updating\n          },\n          onChange: changeObject => {\n            this.setState({\n              boundary: changeObject.bounds,\n              zoomLevel: changeObject.zoom\n            });\n          } //change event value\n          ,\n          children: this.renderPoints()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n  renderPoints() {\n    // pass zoomlevel to points\n    const points = this.state.points[this.state.zoomLevel]; //\n\n    const result = [];\n\n    if (!points) {\n      return result;\n    }\n\n    if (Array.isArray(points)) {\n      // raw data -> county level data\n      for (const county of points) {\n        if (!MapUtils.isInBoundary(this.state.boundary, county.coordinates)) {\n          continue;\n        } // render this county card\n\n\n        result.push( /*#__PURE__*/_jsxDEV(AnyReactComponent, {\n          lat: county.coordinates.latitude //string and true dont need {}\n          ,\n          lng: county.coordinates.longitude,\n          children: /*#__PURE__*/_jsxDEV(CountyCard, {\n            county: county.county,\n            deaths: county.stats.deaths,\n            confirmed: county.stats.confirmed,\n            recovered: county.stats.recovered\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this));\n      }\n\n      ;\n    }\n\n    return result;\n  }\n\n}\n\nMap.defaultProps = {\n  center: {\n    lat: 38.9072,\n    lng: -77.0369\n  },\n  zoom: 12 //from 1 (whole earth) to 20\n\n};\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnyReactComponent\");","map":{"version":3,"sources":["/Users/jingwen/Documents/full_stack/lab2/covid_map/src/components/map/Map.js"],"names":["React","Component","GoogleMapReact","CountyCard","MapService","MapUtils","AnyReactComponent","children","Map","state","boundary","zoomLevel","points","render","height","width","key","props","center","zoom","map","maps","getUSCovidData","then","response","console","log","data","covidDataPoints","getCovidPoints","setState","catch","error","changeObject","bounds","renderPoints","result","Array","isArray","county","isInBoundary","coordinates","push","latitude","longitude","stats","deaths","confirmed","recovered","defaultProps","lat","lng"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport CountyCard from '../card/CountyCard';\nimport {  MapService } from '../../service/mapService';\nimport { MapUtils } from '../../utils/mapUtils';\n\nconst AnyReactComponent = ({ children }) => <div>{children}</div>;\n\nclass Map extends Component {\n    //props 不一定叫 props 也可以识别\n    //state 一定得叫states\n  static defaultProps = {\n    center: {\n      lat: 38.9072,\n      lng: -77.0369,\n    },\n    zoom: 12 //from 1 (whole earth) to 20\n  };\n\n  state = {\n      boundary:{},\n      zoomLevel:12,\n      points:{}, //fetched covid data\n  };\n\n  render() {\n    return (\n      // Important! Always set the container height explicitly\n      // {} to call javascript\n      <div style={{ height: '100vh', width: '100%' }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{key:'AIzaSyCkRg8a0XvAbNSFM3xJILFbeVCx9q9dEBE'}}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n          yesIWantToUseGoogleMapApiInternals\n          onGoogleApiLoaded={({ map, maps }) => {\n              // 1.call api to get data\n              MapService.getUSCovidData()\n                .then((response)=>{\n                     // 2.data handling\n                     // repsonse.data -> covid data\n                     console.log('raw data',response.data);\n                     const covidDataPoints = MapUtils.getCovidPoints(response.data);\n                     //console.log('handled data',covidDataPoints);\n                     this.setState({\n                         points: covidDataPoints,\n                     });\n                })\n                .catch(error =>console.log(error));\n              // 3.set state to trigger updating\n          }}\n          onChange={(changeObject)=>{\n              this.setState({\n                  boundary: changeObject.bounds,\n                  zoomLevel: changeObject.zoom,\n              });\n          }} //change event value\n        >\n            {this.renderPoints()} \n        </GoogleMapReact>\n      </div>\n    );\n  }\n  renderPoints() {\n      // pass zoomlevel to points\n      const points = this.state.points[this.state.zoomLevel];\n      //\n      const result = [];\n      if (!points){\n          return result;\n      }\n      if (Array.isArray(points)) {// raw data -> county level data\n        for (const county of points) {\n            if (!MapUtils.isInBoundary(this.state.boundary, county.coordinates)){\n                continue;\n            }\n            // render this county card\n            result.push(\n                <AnyReactComponent\n                    lat = {county.coordinates.latitude} //string and true dont need {}\n                    lng = {county.coordinates.longitude}\n                    >\n                        <CountyCard \n                        county={county.county} \n                        deaths={county.stats.deaths} \n                        confirmed={county.stats.confirmed} \n                        recovered={county.stats.recovered} />\n                </AnyReactComponent>\n\n            );\n        };\n      }\n\n      return result;\n  }\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}