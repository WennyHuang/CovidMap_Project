{"ast":null,"code":"export const MapUtils = {\n  getCovidPoints: function (countyLevelPoints) {\n    // sanity check\n    if (!countyLevelPoints) {\n      return {};\n    }\n\n    const states = {\n      type: 'states'\n    };\n    const nations = {\n      type: 'nations'\n    }; //aggregate data by state\n\n    for (const point of countyLevelPoints) {\n      //sanity check\n      if (Number.isNaN(point.stats.confirmed)) {\n        console.error('got dirty data', point);\n        continue;\n      } //ignore other sanity check\n      //initialize country\n\n\n      states[point.country] = states[point.country] || {};\n\n      if (states[point.country][point.province] === undefined) {\n        states[point.country][point.province] = {\n          confirmed: 0,\n          deaths: 0,\n          recovered: 0\n        };\n      }\n\n      if (states[point.country][point.province].coordinates === undefined) {\n        states[point.country][point.province].coordinates = point.coordinates;\n      } // sum up\n\n\n      states[point.country][point.province].confirmed += point.stats.confirmed;\n      states[point.country][point.province].deaths += point.stats.deaths;\n      states[point.country][point.province].recovered += point.stats.recovered;\n    } // zoom level\n    // 1-4 nation level\n    // 5-9 state level\n    // 10-20 county level\n\n\n    const result = {};\n    let zoomLevel = 1;\n\n    for (; zoomLevel <= 4; zoomLevel++) {\n      result[zoomLevel] = nations;\n    }\n\n    for (; zoomLevel <= 9; zoomLevel++) {\n      result[zoomLevel] = states;\n    }\n\n    for (; zoomLevel <= 20; zoomLevel++) {\n      result[zoomLevel] = countyLevelPoints;\n    }\n\n    return result;\n  },\n  isInBoundary: function (bounds, coordinates) {\n    return coordinates && bounds && bounds.nw && bounds.se && (coordinates.longitude >= bounds.nw.lng && coordinates.longitude <= bounds.se.lng || coordinates.longitude <= bounds.nw.lng && coordinates.longitude >= bounds.se.lng) && (coordinates.latitude >= bounds.se.lat && coordinates.latitude <= bounds.nw.lat || coordinates.latitude <= bounds.se.lat && coordinates.latitude >= bounds.nw.lat);\n  }\n};","map":{"version":3,"sources":["/Users/jingwen/Documents/full_stack/lab2/covid_map/src/utils/mapUtils.js"],"names":["MapUtils","getCovidPoints","countyLevelPoints","states","type","nations","point","Number","isNaN","stats","confirmed","console","error","country","province","undefined","deaths","recovered","coordinates","result","zoomLevel","isInBoundary","bounds","nw","se","longitude","lng","latitude","lat"],"mappings":"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","sourcesContent":["export const MapUtils = {\n    getCovidPoints: function(countyLevelPoints) {\n        // sanity check\n        if (!countyLevelPoints) {\n            return {};\n        }\n        const states = {\n            type: 'states',\n\n\n        };\n        const nations = {\n            type: 'nations',\n        };\n        //aggregate data by state\n        for (const point of countyLevelPoints) {\n            //sanity check\n            if (Number.isNaN(point.stats.confirmed)) {\n                console.error('got dirty data', point);\n                continue;\n            }\n            //ignore other sanity check\n            //initialize country\n            states[point.country] = states[point.country] || {}\n\n            if (states[point.country][point.province] === undefined){\n                states[point.country][point.province] = {\n                    confirmed:0,\n                    deaths:0,\n                    recovered:0,\n                }\n            }\n        \n        if (states[point.country][point.province].coordinates === undefined) {\n            states[point.country][point.province].coordinates = point.coordinates;\n        }\n        // sum up\n        states[point.country][point.province].confirmed += point.stats.confirmed;\n        states[point.country][point.province].deaths += point.stats.deaths;\n        states[point.country][point.province].recovered += point.stats.recovered;\n        }\n        // zoom level\n        // 1-4 nation level\n        // 5-9 state level\n        // 10-20 county level\n        const result = {};\n        let zoomLevel = 1;\n        for (; zoomLevel <= 4;zoomLevel++){\n            result[zoomLevel] = nations;\n        }\n        for (; zoomLevel <= 9;zoomLevel++){\n            result[zoomLevel] = states;\n        }\n        for (; zoomLevel <= 20;zoomLevel++){\n            result[zoomLevel] = countyLevelPoints;\n        }\n        return result;\n    },\n    isInBoundary: function (bounds, coordinates) {\n        return coordinates && bounds && bounds.nw && bounds.se && ((coordinates.longitude >= bounds.nw.lng && coordinates.longitude <= bounds.se.lng) || (coordinates.longitude <= bounds.nw.lng && coordinates.longitude >= bounds.se.lng))\n            && ((coordinates.latitude >= bounds.se.lat && coordinates.latitude <= bounds.nw.lat) || (coordinates.latitude <= bounds.se.lat && coordinates.latitude >= bounds.nw.lat));\n    },\n\n};"]},"metadata":{},"sourceType":"module"}